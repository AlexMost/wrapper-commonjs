// Generated by CoffeeScript 1.3.3
(function() {
    var cache, diranme, expand, modules, partial, require;

    modules = {};

    cache = {};

    partial = function(fn) {
        var partial_args;
        partial_args = Array.prototype.slice.call(arguments);
        partial_args.shift();
        return function() {
            var a, arg, i, new_args, _i, _len, _ref;
            _ref = [[], 0], new_args = _ref[0], arg = _ref[1];
            for (i = _i = 0, _len = partial_args.length; _i < _len; i = ++_i) {
                a = partial_args[i];
                if (partial_args[i] === void 0) {
                    new_args.push(arguments[arg++]);
                } else {
                    new_args.push(partial_args[i]);
                }
            }
            return fn.apply(this, new_args);
        };
    };

    require = function(name, root, ns) {
        var fn, module, path;
        if ((ns != null) && !((expand(root, name)) in modules)) {
            name = "" + ns + "/" + (expand('', name));
        }
        path = expand(root, name);
        module = cache[path];
        if (module) {
            return module.exports;
        } else if (fn = modules[path] || modules[path = expand(path, './index')]) {
            module = {
                id: path,
                exports: {}
            };
            try {
                cache[path] = module;
                fn(module.exports, module);
                return module.exports;
            } catch (e) {
                delete cache[path];
                throw e;
            }
        } else {
            throw "module '" + name + "'";
        }
    };

    expand = function(root, name) {
        var i, part, parts, results, _i, _ref;
        results = [];
        if (/^\.\.?(\/|$)/.test(name)) {
            parts = [root, name].join('/').split('/');
        } else {
            parts = name.split('/');
        }
        for (i = _i = 0, _ref = parts.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            part = parts[i];
            if (part === '..') {
                results.pop();
            } else if (part !== '.' && part !== '') {
                results.push(part);
            }
        }
        return results.join('/');
    };

    diranme = function(path) {
        return path.split('/').slice(0).join('/');
    };

    this.require = function(name) {
        return require(name, '');
    };

    this.require.define = function(ns, bundle) {
        var key, value, _require, _results;
        _require = partial(require, void 0, void 0, ns);
        for (key in bundle) {
            value = bundle[key];
            modules[key] = partial(value, void 0, _require, void 0);
        }
        _results = [];
        for (key in bundle) {
            value = bundle[key];
            _results.push(modules[key]({}, {}));
        }
        return _results;
    };

}).call(this);




/* Cafe 960d0028-7556-4449-be07-07171ab03ba1 Tue Dec 04 2012 14:04:26 GMT+0200 (EET) */
/* ZB:mod2.js */

require.define("mod2",
        {
            "mod2/index": function(exports, require, module) {
                                (function() {

                                    module.exports = {index: 'module2'}

                                }).call(this);
                          },

            "mod2/module2": function(exports, require, module) {
                                (function() {
                                    "Simple common js module";

                                    module.exports = {module2:'module2'};

                                }).call(this);
                            }
        }
);


require.define("mod1", {"mod1/index": function(exports, require, module) {(function() {

  "Simple common js module";
  m1 = require('module1');
  console.log(m1);
  m2 = require('mod2/module2');
  console.log(m2)

  module.exports = {index:'module1'};

}).call(this);
}, "mod1/module1": function(exports, require, module) {(function() {

  "Simple common js module";

  module.exports = {module1: 'module1'};

}).call(this);
}});
